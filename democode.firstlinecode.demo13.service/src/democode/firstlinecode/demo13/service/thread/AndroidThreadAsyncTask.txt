package democode.firstlinecode.demo13.service.thread;

import android.os.AsyncTask;
import android.widget.Toast;

/**
 * !!!!! 这里的类很多的代码是虚构的,看看就好可以将文件名后缀改为.java文件,但是会出现很多的报错. !!!!!

 * 为了更加方便我们在子线程中对 UI 进行操作，Android 还提供了另外一些好用的工
 * 具，AsyncTask 就是其中之一。借助 AsyncTask，即使你对异步消息处理机制完全不了解，
       也可以十分简单地从子线程切换到主线程。当然，AsyncTask 背后的实现原理也是基于异步
       消息处理机制的，只是 Android 帮我们做了很好的封装而已。
   
       使用的时候需要传入三个参数:
   1. Params
              在执行 AsyncTask 时需要传入的参数，可用于在后台任务中使用。
   2. Progress
	    后台任务执行时，如果需要在界面上显示当前的进度，则使用这里指定的泛型作为进度单位。
   3. Result
	    当任务执行完毕后，如果需要对结果进行返回，则使用这里指定的泛型作为返回值类型。
	
       这里我们把 AsyncTask 的第一个泛型参数指定为 Void，表示在执行 AsyncTask 的时候不
需要传入参数给后台任务。第二个泛型参数指定为 Integer，表示使用整型数据来作为进度显
示单位。第三个泛型参数指定为 Boolean，则表示使用布尔型数据来反馈执行结果。
    
    还需要去重写 AsyncTask 中的几个方法才能完成对任务的定制。经常需要去重写的方法有以下四个。
    
	1. onPreExecute()
	
	2. doInBackground(Params...)
	
	3. onProgressUpdate(Progress...)
	
	4. onPostExecute(Result)

     简单来说，使用 AsyncTask 的诀窍就是，在 doInBackground()方法中去执行具体的耗时
任务，在 onProgressUpdate()方法中进行 UI 操作，在 onPostExecute()方法中执行一些任务的
收尾工作。

     如果想要启动这个任务，只需编写以下代码即可：new DownloadTask().execute();
  
     以上就是 AsyncTask 的基本用法，怎么样，是不是感觉简单方便了许多？我们并不需要
去考虑什么异步消息处理机制，也不需要专门使用一个 Handler 来发送和接收消息，只需要
调用一下 publishProgress()方法就可以轻松地从子线程切换到 UI 线程了。
   
 * @author Administrator
 *
 */
public class AndroidThreadAsyncTask extends AsyncTask<Void,Integer,Boolean> {

	
	/**
	 * 这个方法会在后台任务开始执行之前调用，用于进行一些界面上的初始化操作，比如显示一个进度条对话框等。
	 */
	@Override
	protected void onPreExecute() {
		progressDialog.show(); // 显示进度对话框
	}
	
	/**
	 * 这个方法中的所有代码都会在子线程中运行，我们应该在这里去处理所有的耗时任务。
	 * 任务一旦完成就可以通过 return 语句来将任务的执行结果返回，如果 AsyncTask 的第三个泛型参数指定的是 Void，就可以不返回任务执行结果。
	 * 注意，在这个方法中是不可以进行 UI 操作的，如果需要更新 UI 元素，比如说反馈当前任务的执行进度，可以调
	       用 publishProgress(Progress...)方法来完成。
	 */
	@Override
	protected Boolean doInBackground(Void... params) {
		
		try {
			while (true) {
				
				/*
				 * doInBackground()方法里去执行具体的下载任务。这个
				       方法里的代码都是在子线程中运行的，因而不会影响到主线程的运行。注意这里虚构了一个
			       doDownload()方法，这个方法用于计算当前的下载进度并返回，我们假设这个方法已经存在了。
				 * */
				int downloadPercent = doDownload(); // 这是一个虚构的方法
				publishProgress(downloadPercent);
			
				if (downloadPercent >= 100) {
					break;
				}
			}
		} catch (Exception e) {
			return false;
		}
		
		return true;
	}
	
	/**
	 * 当在后台任务中调用了 publishProgress(Progress...)方法后，这个方法就会很快被调用，方法中携带的参数就是在后台任务中传递过来的。
	 * 在这个方法中可以对 UI 进行操作，利用参数中的数值就可以对界面元素进行相应地更新。
	 */
	@Override
	protected void onProgressUpdate(Integer... values) {
		
		// 在这里更新下载进度
		
		/*
		 * 在得到了当前的下载进度后，下面就该考虑如何把它显示到界面上了，由于doInBackground()方法是在子线程中运行的，在这里肯定不能进行 UI 操作，所以我们可以调
		       用 publishProgress()方法并将当前的下载进度传进来，这样 onProgressUpdate()方法就会很快被调用，在这里就可以进行 UI 操作了。
		 * */
		progressDialog.setMessage("Downloaded " + values[0] + "%");
	}
	
	/**
	 * 当后台任务执行完毕并通过 return 语句进行返回时，这个方法就很快会被调用。返
	回的数据会作为参数传递到此方法中，可以利用返回的数据来进行一些 UI 操作，比如
	说提醒任务执行的结果，以及关闭掉进度条对话框等。
	 */
	@Overrides
	protected void onPostExecute(Boolean result) {
		progressDialog.dismiss(); // 关闭进度对话框
		
		/*
		 * 当下载完成后，doInBackground()方法会返回一个布尔型变量，这样 onPostExecute()方
		 * 法就会很快被调用，这个方法也是在主线程中运行的。然后在这里我们会根据下载的结果来
		       弹出相应的 Toast 提示，从而完成整个 DownloadTask 任务。
		 * */
		
		// 在这里提示下载结果
		if (result) {
			Toast.makeText(context, "Download succeeded",
			Toast.LENGTH_SHORT).show();
		} else {
			Toast.makeText(context, " Download failed",
			Toast.LENGTH_SHORT).show();
		}
		
		}
	}

}